== Ellie, HathiTrust API Paste-Up

Ellie is a web application for looking up object information in the HathiTrust repository. The application queries the          HathiTrust APIs (Bibliographic API, Data API), and then displays the returned information about the object. That application maybe helpful for inspecting ingested objects, developing HathiTrust clients, and just for checking to see if an object is in the repository.

The application uses the Ruby and Rails framework. Familiarity with Ruby and Rails would be helpful for setup.

== Installation

Requirements: 
- Ruby 1.8.6 or 1.8.7
- Rails 2.3.5

1. Clone repository

git clone git://github.com/scollett/ellie.git

2. Install required gems => httparty (0.5.2), Crack (0.1.6)

cd ellie (or whatever you named it)
rake gems:install

Note: Additional gems required for test environment (not required to run app) => thoughtbot-shoulda (2.10.1), thoughtbot-factory_girl (1.2.2), fakeweb (1.2.8)

3. Start up the web server

script/server (will launch server at http://0.0.0.0:3000 by default)

== Application on Heroku

This is an easy application to deploy to Heroku (http://heroku.com).

1. Unpack the gems for Heroku

rake gems:unpack

2. Commit those changes to the repository

git add vendor/gems/*
git commit -m "Unpacking gems for Heroku"

3. Create an application (http://docs.heroku.com/quickstart)

heroku create

4. Push your application (http://docs.heroku.com/quickstart)

git push heroku master

== Description of Contents (From Rails Documentation)

app
  Holds all the code that's specific to this particular application.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from ApplicationController
  which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb.
  Most models will descend from ActiveRecord::Base.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby
  syntax.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the common
  header/footer method of wrapping views. In your views, define a layout using the
  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,
  call <% yield %> to render the view using this layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are generated
  for you automatically when using script/generate for controllers. Helpers can be used to
  wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database, and other dependencies.

db
  Contains the database schema in schema.rb.  db/migrate contains all
  the sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when generated
  using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that doesn't
  belong under controllers, models, or helpers. This directory is in the load path.

public
  The directory available for the web server. Contains subdirectories for images, stylesheets,
  and javascripts. Also contains the dispatchers and the default HTML files. This should be
  set as the DOCUMENT_ROOT of your web server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the script/generate scripts, template
  test files will be generated for you and placed in this directory.

vendor
  External libraries that the application depends on. Also includes the plugins subdirectory.
  If the app has frozen rails, those gems also go here, under vendor/rails/.
  This directory is in the load path.
